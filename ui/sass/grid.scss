// Name:            Grid
//
// Description:     Mobile first 12 列网格系统，基于浮动布局；相对定位实现 push / pull
//
//                  Breakpoint:
//                    sm: <= 640px
//                    md: 641px <= 1024px
//                    lg: >1024px
//
// Component:       `.am-g`
//
// Sub-objects:     `.am-u-{point}-{n}`
//
// =============================================================================

/* ==========================================================================
   Component: Grid
 ============================================================================ */

// Mixins
// =============================================================================

@mixin reset-order($point) {
	.u-#{$point}-reset-order {
		margin-left: 0;
		margin-right: 0;
		left: auto;
		right: auto;
		float: left;
	}

}

@mixin col-basic() {
	[class*="u-"] {
		width: 100%;
		padding-left: $grid-gutter;
		padding-right: $grid-gutter;
		float: left;
		position: relative;

		// Float the last col to right
		& + &:last-child {
			float: right;
		}

		// Not float the last col
		& + &.u-end {
			float: left;
		}

		@media #{$medium-up} {
			& {
				padding-left: $grid-gutter-md;
				padding-right: $grid-gutter-md;
			}
		}
	}

	// [class*="u-pull-"],
	// [class*="u-push-"] {
	//  position: relative;
	// }

	[class*="u-pull-"] {
		left: auto;
	}

	[class*="u-push-"] {
		right: auto;
	}

}

@mixin col-misc(
	$point) {
	[class*="u-"] {
		// 居中的网格
		&.u-#{$point}-centered {
			margin-left: auto;
			margin-right: auto;
			float: none;

			&:last-child {
				float: none;
			}
		}

		&.u-#{$point}-uncentered {
			margin-left: 0;
			margin-right: 0;
			float: left;

			&:last-child {
				float: left;
			}
		}
	}

}

// calc grid: width, push, pull, offset
@mixin calc-grid-col($point, $type,  $i: 1,  $n: $grid-columns ) {
	@if ($type = width) and ($i <= $n) {
		.u-#{$point}-#{$i} {
			width: ($i * 100% / $n);
		}
	} @else if ($type = push) and ($i = 1) {
		.u-#{$point}-push-0 {
			left: 0;
		}
	} @else if ($type = push) and ($i < $n) {
		.u-#{$point}-push-#{$i} {
			left: $i * (100% / $n);
		}
	} @else if ($type = pull) and ($i = 1) {
		.u-#{$point}-pull-0 {
			right: 0;
		}
	} @else if ($type = pull) and ($i < $n) {
		.u-#{$point}-pull-#{$i} {
			right: $i * (100% / $n);
		}
	} @else if ($type = offset) and ($i = 1) {
		.u-#{$point}-offset-0 {
			margin-left: 0;
		}
	} @else if ($type = offset) and ($i < $n) {
		.u-#{$point}-offset-#{$i} {
			margin-left: $i * (100% / $grid-columns);
		}
	}
}

@mixin loop-cols($point, $type, $i: 1,  $n: $grid-columns) {
	@if ($i <= $n) {
		@include calc-grid-col($point, $type, $i, $n);
		@include loop-cols($point, $type, ($i + 1), $grid-columns);
	}
}

@mixin make-cols(
	$point) {
	@include loop-cols(
			$point,
			width
	);
	@include loop-cols(
			$point,
			pull
	);
	@include loop-cols(
			$point,
			push
	);
	@include loop-cols(
			$point,
			offset
	);
	@include reset-order(
			$point
	);
	@include col-misc(
			$point
	);
}

// Container
.container {
	@include grid-container();

	> .g {
		width: auto;
		margin-left: -$grid-gutter;
		margin-right: -$grid-gutter;

		@media #{$medium-up} {
			margin-left: -$grid-gutter-md;
			margin-right: -$grid-gutter-md;
		}
	}
}

.g {
	margin: 0 auto;
	width: 100%;
	@include clearfix();

	// Nested grid
	& & {
		margin-left: -$grid-gutter;
		margin-right: -$grid-gutter;
		width: auto;

		&.g-collapse {
			margin-left: 0;
			margin-right: 0;
			width: auto;
		}

		// Increasing gutter for medium and large screen
		@media #{$medium-up} {
			margin-left: -$grid-gutter-md;
			margin-right: -$grid-gutter-md;
		}
	}

	&.g-collapse & {
		margin-left: 0;
		margin-right: 0;
	}
}

// no padding
.g-collapse {
	[class*="u-"] {
		padding-left: 0;
		padding-right: 0;
	}
}

// Fixed width row
.g-fixed {
	max-width: $grid-max-width;
}

@include col-basic(
);

@media #{$screen} {
	@include make-cols(
			sm
	);
}

@media #{$medium-up} {
	@include make-cols(
			md
	);
}

@media #{$large-up} {
	@include make-cols(
			lg
	);
}
